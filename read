import { TestBed, inject } from '@angular/core/testing';

import { WeatherService } from './weather.service';
import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';
import * as MockData from './Weather-MockData.json';

describe('WeatherService', () => {
  let service: WeatherService
  let httpMock: HttpTestingController
  let httpClientSpy: { get: jasmine.Spy }

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [HttpClientTestingModule],
      providers: [WeatherService]
    });

    service = TestBed.get(WeatherService);
    httpMock = TestBed.get(HttpTestingController);
    httpClientSpy = jasmine.createSpyObj('httpclient', ['get']);
  });

  afterEach(() => {
    httpMock.verify()
  })

  it('should be created', () => {
    expect(service).toBeTruthy();
  })
  it('get by city name', () => {
    const dummyWeather = {
      "coord": {
        "lon": 35.11,
        "lat": 56.8
      },
      "weather": [
        {
          "id": 804,
          "main": "Clouds",
          "description": "overcast clouds",
          "icon": "04d"
        }
      ],
      "base": "stations",
      "main": {
        "temp": 271.397,
        "pressure": 1028.3,
        "humidity": 64,
        "temp_min": 271.397,
        "temp_max": 271.397,
        "sea_level": 1048.45,
        "grnd_level": 1028.3
      },
      "wind": {
        "speed": 9.86,
        "deg": 203.501
      },
      "clouds": {
        "all": 88
      },
      "dt": 1542100871,
      "sys": {
        "message": 0.1551,
        "country": "RU",
        "sunrise": 1542086156,
        "sunset": 1542115862
      },
      "id": 510149,
      "name": "Petropavlovskoye",
      "cod": 200
    }
    httpClientSpy.get.and.returnValue(dummyWeather);

    service.getCurrentByCityName('eldoret').subscribe((weather) => {
      expect(weather).toEqual(dummyWeather, 'expected weather data'), fail;
      expect(httpClientSpy.get.calls.count()).toBe(1, 'single call');
    })



    // service.getCurrentByCityName('eldoret').subscribe((weather) => {
    //   // expect(this.dummyWeather.length).toBe(2);
    //   expect(weather).toEqual(dummyWeather);
    // })

    // const request = httpMock.expectOne(`${service.WEATHERURL}/weather?q=eldoret&APPID=${service.apiKey}`);
    // expect(request.request.method).toEqual('GET');
    // request.flush(dummyWeather);

  // it('should get moods and activities', () => {
  //   let moodsActivities = MockData[2];

  //   service.getSavedData().subscribe((data) => {
  //     console.log('success');
  //     expect(data.length).toBe(2);
  //     expect(data).toEqual(moodsActivities);

  //     const request = httpMock.expectOne('http://localhost:3100/getData');
  //     expect(request.request.method).toBe('GET');
  //     request.flush(moodsActivities);
  //   })
      
    
  // })

});




testing
I FEEL SO DUMB, MY HEAD DOESNT WANT TO CONSUME ANYTHING
HOW DO I APPROACH this

I REALLY NEED TO GRASP THESE CONCEPTS
1. deep angular techniques
2. angular testing
3. deployment

The @HostListener decorator lets you subscribe to events of the DOM element that hosts an attribute directive, the <p> in this case.